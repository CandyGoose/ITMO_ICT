
"""
Замыкание - это "процедура вместе с привязанной к ней совокупностью данных",
в противовес объектам в объектном программировании, как: "данные вместе
с привязанным к ним совокупностью процедур"

Смысл замыкания состоит в том, что определение функции "замораживает"
окружающий её контекст на момент определения
"""
# 1) параметризация создания функции
def multiplier( n ):    
    """
    multiplier возвращает функцию умножения на n
    """
    def mul( k ):
        return n * k
    return mul
 
mul3 = multiplier(3)    # mul3 - функция, умножающая на 3
mul5 = multiplier(5)    # mul5 - функция, умножающая на 5

print(mul3(5), mul5(5))  # 15 25

''' аналог с применение lambda'''
multiplier = lambda n: lambda k: n * k
mul4 = multiplier(4)
print(mul4(7))          # 28

# 2) использование значения параметра по умолчанию в точке определения функции

n = 3
def mult( k, mul = n ):     # значение 3 "замораживается" в функции 
    return mul * k

# присвоения значений параметру по умолчанию не приведут к изменению
# ранее определённой функции:
n = 7
print(mult(3))      # 9 
n = 13
print(mult(5))      # 15

# но сама функция может быть переопределена
n = 10
mult = lambda k, mul=n: mul * k     
print(mult(3))      # 30
