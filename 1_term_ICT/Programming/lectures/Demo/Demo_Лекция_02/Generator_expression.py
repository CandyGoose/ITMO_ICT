# генераторы возвращают объект генератора, а не список:

my_list = ['a', 'b', 'c', 'd']
gen_obj = (x for x in my_list)
print(gen_obj)

for val in gen_obj:
    print(val)
# Второй раз перебрать генератор в цикле for не получится,
# так как объект-генератор уже сгенерировал все значения по заложенной в него "формуле".
# Поэтому генераторы обычно используются, когда надо единожды пройтись по итерируемому объекту.

for val in gen_obj:
    print('еще раз', val)


# выражение генератора делает то же самое, что и генератор списка,
# но делает это лениво (то есть в момент запроса объекта): 
import sys
g = (i * 2 for i in range(10000) if i % 3 == 0 or i % 5 == 0)
print(sys.getsizeof(g))     # 112
le = [i * 2 for i in range(10000) if i % 3 == 0 or i % 5 == 0]
print(sys.getsizeof(le))    # 38208

# генераторы экономят память, так как в ней хранятся не все значения, большого списка,
# а только предыдущий элемент, предел и формула, по которой вычисляется следующий элемент
