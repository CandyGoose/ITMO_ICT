# Целые числа

# Фактически нет предела длины целочисленного значения
# Ограничено объемом доступной в системе памяти
print(1231231231231231231231231231231231231231231231239999999 + 1)

# Python интерпретирует последовательность десятичных цифр без префикса как десятичное число:
print(10)
# для других представлений используются префиксы
print(0o10) # 8
print(0x10) # 16
print(0b10) # 2

print(type(10))
# Вещественные числа

# тип float представляет числа с плавающей точкой двойной точности
print(0.1 + 0.2) # 0.30000000000000004
# числа типа float не могут надежно сравниваться на равенство значений,
# так как имеют ограниченную точность
print(0.1 + 0.1 + 0.1 == 0.3) # False

# Комплексные числа
# определяются следующим образом: <вещественное число>+<мнимая часть>j.
print (2+3j) # (2+3j)
print(type(2+3j)) # <class 'complex'>


# Неизменяемые типы

a = 1
b = 2
c = "start"
print(a)
# идентификатор – это некоторое целочисленное значение, посредством которого
# уникально адресуется объект
print(id(a))
a = b
b = b + 1
print(id(a))
print(a)
print(type(a))
a = c
print(id(a))
print(a)
print(type(a))


# Изменяемые типы

list1 = [2, 3, 4]
print(id(list1))

list2 = list1   # Оператор присваивания копирует ссылку на объект, создавая поверхностную копию
print(id(list2))
list1[1] = 33
print(list1)    # Переменная list1 изменилась
print(list2)    # Переменная list2 также изменилась
print(id(list1))

list3 = list1[:] # создается копия списка - получение среза от начала и до конца списка - глубокое копирование
list1[1] = 333
print(list1)    # Переменная list1 изменилась
print(list3)    # Переменная list3 не изменилась
print(id(list1))
print(id(list3))

list1 = list1 * 2
print(list1)
print(id(list1))

list1 = 8
print(list1)    # Переменная list1 изменилась
print(list2)    # Переменная list2 не изменилась
print(id(list1))
print(id(list2))


mylist = [11,22,33,44,55,66]
mylist.append(77) # функция, выполняющая непосредственные изменения в объектах
                  # следует вызывать без присваивания возвращаемого значения
print(mylist)

# Тип None - используется для обозначения отсутствия значения
# Пример. Возвращается из функций, которые ничего явно не возвращают
mylistnew = mylist.append(88) # возвращает None
print(mylistnew)              # None
print(mylist)
