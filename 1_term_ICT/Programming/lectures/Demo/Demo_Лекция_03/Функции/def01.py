# применение стандартных функций
x1 = pow(2,5)
print("x1 =", x1)

mylist = [11,22,33,44,55,66]
mylist.append(77) # функция, выполняющая непосредственные изменения в объектах
                  # следует вызывать без присваивания возвращаемого значения
print(mylist)
mylistnew = mylist.append(88) # возвращает None
print(mylistnew)              # None
print(mylist)


#Функция в python - объект, принимающий аргументы и возвращающий значение

# def просто выполняет присваивание во время выполнения
# инструкции def не интерпретируются, пока они не будут достигнуты
# и выполнены потоком выполнения, т.е. программный код внутри инструкции def
# не выполняется, пока функция не будет вызвана позднее

def add(x, y):
    #a += 2
    return x + y

a, b = 1, 2
s = add(a,b)
print("Сумма {0} и {1} равна {2}".format(a,b,s))

ob = add        # Связывание объекта функции с другим объектом 
print(ob(3,5))  # вызов функции с использованием нового имени


# Функция может быть любой сложности и возвращать любые объекты:
# списки, кортежи и функции

def newfunc(n):
    def myfunc(x):
        return x + n
    return myfunc

newf = newfunc(100) # newf - это функция 
print(newf(200))


def add(x, y):
    print("СуммаP {0} и {1} равна {2}".format(x,y,x+y))

a, b = 11, 22
add(a,b)

s = add(a,b)
print("СуммаN {0} и {1} равна {2}".format(a,b,s))

# def может появляться везде, где могут появляться инструкции,
# даже внутри других инструкций

x = 3
y = -3

if x > 0:
    if y > 0:               # x > 0, y > 0
       def func():
           print("Первая четверть")
    else:                   # x > 0, y < 0
        def func():
            print("Четвертая четверть")
else:
    if y > 0:               # x < 0, y > 0
        def func():
            print("Вторая четверть")
    else:                   # x < 0, y < 0
        def func():
            print("Третья четверть")

#func()
